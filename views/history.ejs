<%- include('./partials/header.ejs') %>

<h1 class="mb-4">Histórico de Reservas</h1>

<p class="lead">Nesta página você pode consultar todo o seu histórico de reservas anteriores no sistema do INTELI. O histórico completo permite que você acompanhe seu padrão de uso das salas, facilitando o planejamento futuro e fornecendo um registro detalhado de todas as suas atividades passadas.</p>

<div class="mb-4">
    <p>O histórico de reservas é uma ferramenta valiosa para análise e planejamento. Você pode verificar quais salas utilizou com mais frequência, os horários mais comuns de suas atividades e a finalidade de cada reserva. Essas informações podem ajudar a otimizar suas futuras reservas e identificar padrões em suas necessidades de espaço.</p>
</div>

<div class="card mb-4">
    <div class="card-header bg-secondary text-white">
        <h5 class="mb-0">Histórico Completo de Reservas</h5>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <label for="history-filter" class="form-label">Filtrar por período:</label>
            <select class="form-select" id="history-filter">
                <option value="all">Todas as reservas</option>
                <option value="month">Último mês</option>
                <option value="quarter">Último trimestre</option>
                <option value="semester">Último semestre</option>
                <option value="year">Último ano</option>
            </select>
        </div>
        
        <div id="history-container">
            <p class="text-center" id="loading-message">Carregando seu histórico de reservas...</p>
        </div>
    </div>
</div>

<div class="modal fade" id="historyDetailModal" tabindex="-1" aria-labelledby="historyDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="historyDetailModalLabel">Detalhes da Reserva</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="history-booking-details">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Sala:</strong> <span id="detail-room-name"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Data:</strong> <span id="detail-date"></span></p>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Horário:</strong> <span id="detail-time"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Participantes:</strong> <span id="detail-attendees"></span></p>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <p><strong>Finalidade:</strong></p>
                        <p id="detail-purpose" class="border p-2 rounded bg-light"></p>
                    </div>
                    
                    <div class="mb-3">
                        <p><strong>Status:</strong> <span id="detail-status" class="badge"></span></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Carregar histórico de reservas
    fetchHistory('all');
    
    // Configurar filtro
    document.getElementById('history-filter').addEventListener('change', function() {
        fetchHistory(this.value);
    });
});

function fetchHistory(filter) {
    // Temporário - normalmente usaria o ID do usuário da sessão
    const userId = 1;
    
    axios.get(`/api/history/user/${userId}`)
        .then(function(response) {
            const historyContainer = document.getElementById('history-container');
            historyContainer.innerHTML = '';
            
            if (response.data.length === 0) {
                historyContainer.innerHTML = '<p class="text-center">Você não possui histórico de reservas.</p>';
                return;
            }
            
            // Filtrar reservas com base no período selecionado
            let bookings = response.data;
            const now = new Date();
            
            if (filter !== 'all') {
                const filterDate = new Date();
                
                switch (filter) {
                    case 'month':
                        filterDate.setMonth(now.getMonth() - 1);
                        break;
                    case 'quarter':
                        filterDate.setMonth(now.getMonth() - 3);
                        break;
                    case 'semester':
                        filterDate.setMonth(now.getMonth() - 6);
                        break;
                    case 'year':
                        filterDate.setFullYear(now.getFullYear() - 1);
                        break;
                }
                
                bookings = bookings.filter(booking => {
                    const bookingDate = new Date(booking.date);
                    return bookingDate >= filterDate && bookingDate <= now;
                });
            }
            
            if (bookings.length === 0) {
                historyContainer.innerHTML = '<p class="text-center">Nenhuma reserva encontrada para o período selecionado.</p>';
                return;
            }
            
            // Ordenar reservas por data (mais recentes primeiro)
            bookings.sort((a, b) => {
                const dateA = new Date(`${a.date}T${a.startTime}`);
                const dateB = new Date(`${b.date}T${b.startTime}`);
                return dateB - dateA;
            });
            
            // Criar tabela para exibir o histórico
            const table = document.createElement('table');
            table.className = 'table table-striped table-hover';
            
            table.innerHTML = `
                <thead>
                    <tr>
                        <th>Data</th>
                        <th>Sala</th>
                        <th>Horário</th>
                        <th>Status</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody id="history-table-body">
                </tbody>
            `;
            
            historyContainer.appendChild(table);
            const tableBody = document.getElementById('history-table-body');
            
            bookings.forEach(booking => {
                const row = document.createElement('tr');
                
                const formattedDate = formatDate(booking.date);
                const startTime = formatTime(booking.startTime);
                const endTime = formatTime(booking.endTime);
                
                // Determinar status da reserva
                let status = 'Concluída';
                let statusClass = 'bg-success';
                
                if (booking.status === 'cancelled') {
                    status = 'Cancelada';
                    statusClass = 'bg-danger';
                } else if (booking.status === 'no_show') {
                    status = 'Não Compareceu';
                    statusClass = 'bg-warning text-dark';
                }
                
                row.innerHTML = `
                    <td>${formattedDate}</td>
                    <td>${booking.room.name}</td>
                    <td>${startTime} - ${endTime}</td>
                    <td><span class="badge ${statusClass}">${status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-info view-history-btn" 
                                data-booking-id="${booking.id}">
                            Detalhes
                        </button>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
            
            // Adicionar event listeners para os botões de detalhes
            document.querySelectorAll('.view-history-btn').forEach(function(btn) {
                btn.addEventListener('click', function() {
                    const bookingId = this.getAttribute('data-booking-id');
                    showHistoryDetails(bookingId, bookings);
                });
            });
        })
        .catch(function(error) {
            console.error('Erro ao carregar histórico:', error);
            document.getElementById('history-container').innerHTML = 
                '<p class="text-center text-danger">Erro ao carregar seu histórico de reservas. Por favor, tente novamente mais tarde.</p>';
        });
}

function showHistoryDetails(bookingId, bookings) {
    // Encontrar a reserva pelo ID
    const booking = bookings.find(b => b.id == bookingId);
    
    if (!booking) {
        alert('Erro ao carregar detalhes da reserva.');
        return;
    }
    
    const formattedDate = formatDate(booking.date);
    const startTime = formatTime(booking.startTime);
    const endTime = formatTime(booking.endTime);
    
    document.getElementById('detail-room-name').textContent = booking.room.name;
    document.getElementById('detail-date').textContent = formattedDate;
    document.getElementById('detail-time').textContent = `${startTime} - ${endTime}`;
    document.getElementById('detail-attendees').textContent = booking.attendees;
    document.getElementById('detail-purpose').textContent = booking.purpose;
    
    // Configurar status
    const statusElement = document.getElementById('detail-status');
    let status = 'Concluída';
    let statusClass = 'bg-success';
    
    if (booking.status === 'cancelled') {
        status = 'Cancelada';
        statusClass = 'bg-danger';
    } else if (booking.status === 'no_show') {
        status = 'Não Compareceu';
        statusClass = 'bg-warning text-dark';
    }
    
    statusElement.textContent = status;
    statusElement.className = `badge ${statusClass}`;
    
    // Mostrar modal
    const historyModal = new bootstrap.Modal(document.getElementById('historyDetailModal'));
    historyModal.show();
}

function formatDate(dateString) {
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString('pt-BR', options);
}

function formatTime(timeString) {
    const [hours, minutes] = timeString.split(':');
    return `${hours}:${minutes}`;
}
</script>

<%- include('./partials/footer.ejs') %>